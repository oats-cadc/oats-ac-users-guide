<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "oats_ac_users_guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-client_usage_examples">
	<title>Java command line client usage examples</title>

<para>
The usage of the java command line client requires the user authentication through
user proxy and to have the correct right for each operation. The user proxy can be 
obtained in three ways, given a X509 user certificate
released by a trusted Certification Authority for authentication: mycert.crt, mykey.key
</para>

<orderedlist>

<listitem>
<para>
The concatenetion of key plus cert (pay attention: the order matter) can be used as user proxy:
</para>
<screen>
cat mykey.key mycert.crt >> userproxy.pem
</screen>
</listitem>

<listitem>
<para>
The user proxy can be created using a script provided in the core module:
</para>
<screen>
core/cadc-util/scripts/createProxyCert /path/mykey_and_cert.pem &lt;days of validity number&gt; cadcproxy
</screen>
<para>
Where
</para>
<screen>
cat mykey.key mycert.pem &gt; mykey_and_cert.pem
</screen>
<para>
Certificate and key must not contain bag attributes and key must 
be no password protected. If needed, the password can be removed doing:
</para>
<screen>
openssl rsa -in mykey.pem -out mykey.pem.new
Enter pass phrase for mykey.pem: ****************
writing RSA key
$&gt;mv mykey.pem.new mykey.pem
</screen>
</listitem>

<listitem>
<para>
A VOMS proxy can be used. To create it:
Create two files:
</para>
<screen>
$HOME/.globus/usercert.pem (certificate)
$HOME/.globus/userkey.pem (private key)
</screen>
<para>
Permissions on the pem files must be:
</para>
<screen>
644 for $HOME/.globus/usercert.pem
400 for $HOME/.globus/userkey.pem
</screen>
<para>
use the VOMS client ant your Virtual Organization:
</para>
<screen>
voms-proxy-init --voms voname
</screen>
</listitem>
</orderedlist>

<section id="sect-create_grp">
		<title>Create a new group</title>
<screen>
java  ca.nrc.cadc.ac.client.Main --create \ 
                                 --group=ivo://&lt;authority&gt;/gms?groupName \
                                 --cert=$X509_USER_PROXY
</screen>

</section>
	
<section id="sect-add_member">
		<title>Add a new member to a group</title>

<screen>
java  ca.nrc.cadc.ac.client.Main --add-member \
        --group=ivo://&lt;authority&gt;/gms?Agroup \
        --userid=Auser
        --cert=$X509_USER_PROXY
</screen>

</section>
	
<section id="sect-remove_member">
		<title>Remove a group member</title>
<screen>
java  ca.nrc.cadc.ac.client.Main --remove-member \
        --group=ivo://&lt;authority&gt;/gms?Agroup \
        --userid=Auser
        --cert=$X509_USER_PROXY
</screen>

</section>

<section id="sect-delete_grp">
                <title>Delete a group</title>
<screen>
java ca.nrc.cadc.vos.client.Main \
        --delete \
        --group=ivo://&lt;authority&gt;/gms?Agroup \  
        --cert=$X509_USER_PROXY
</screen>
<para>
This command empty the group, but it remains in the 389-ds database
</para>

</section>

<section id="sect-add_admin">
                <title>Add an administrator to a group</title>
<screen>
java  ca.nrc.cadc.ac.client.GMSClientMain --add-admin \
        --group=ivo://&lt;authority&gt;/gms?Agroup \
        --userid=Auser \
        --cert=$X509_USER_PROXY
</screen>

</section>

<section id="sect-remove_admin">
                <title>Remove an administrator from a group</title>
<screen>
java  ca.nrc.cadc.ac.client.GMSClientMain --remove-admin \
        --group=ivo://&lt;authority&gt;/gms?Agroup \
        --userid=Auser \
        --cert=$X509_USER_PROXY
</screen>

</section>

<section id="sect-list_grps">
                <title>List existing groups</title>
<para>
Existing groups can be listed using a curl command or by browser:
</para>
<screen>
curl --user Auser[:AuserPassword] https://&lt;your_access_control_service&gt;/ac/groups
https://&lt;your_access_control_service&gt;/groups
</screen>

<para>
Existing group Agroup details can be displayed using a curl command or by browser:
</para>
<screen>
curl --user Auser[:AuserPassword] https://&lt;your_access_control_service&gt;/ac/groups/Agroup
https://&lt;your_access_control_service&gt;/groups/Agroup
</screen>

</section>

</chapter>


